// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];




    PARTS:
    // Works with status bits; when higher necessity bit is used
    
    /*
    // If reset is active, both status bits are set to 0 
    Mux(a = load, b = false, sel = reset, loadStatus1);
    Mux(a = inc, b = false, sel = reset, incStatus1);

    // If reset is NOT active, but load is active, increment will be set 0
    Mux(a = inc, b = false, sel = load, incStatus2);
    */


        /* Version 1, doing it in order RESET->LOAD->INCREMENT
    // Check: RESET
    Mux16(a = in, b = false, sel = reset, out = resetOut);
    
    // If not RESET, then continue
    // Next check: LOAD
    // What are we loading from? We need a register
    
    Mux16(a = resetOut, b = in, sel = load, out = loadOut);
    
    // Next check: INCREMENT
    Incrementer(in = loadOut, out = incrementOut); 
    Mux16(a = loadOut, b = incrementOut, sel = )


    Register (in = resetStatus, load = reset, out = resetOut);
        */




    // Version 2, doing it in order that allows for self clean up
    // INCREMENT -> LOAD -> CLEAR

    // Increment
    // Saving an incremented value
    Inc16 (in = prevOut, out = incrementOut);

    Mux16 (a = prevOut, b = incrementOut, sel = inc, out = incTrueOut);


    // Selecting betw/ the two options
    Mux16 (a = incTrueOut, b = in, sel = load, out = incLoadOut);

    // Reset
    Mux16 (a = incLoadOut, b = false, sel = reset, out = regIn);

    Register (in = regIn, load = true, out = prevOut, out = out);

    //








    
    /*
    We expect to use:
    - Register
    - Incrementer
    - Multiplexor

    */

}
